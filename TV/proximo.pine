//@version=4
study(title="Pivot Points High Low (HH/HL/LH/LL) [Anan] ", shorttitle="Pivots HL [Anan]", overlay=true, max_labels_count=500)

//INPUTS
gr1="Source / Length Left / Length Right"
srcH = input(high, title="Pivot High", inline="Pivot High", group=gr1)
leftLenH = input(title="", type=input.integer, defval=5, minval=1, inline="Pivot High",group=gr1)
rightLenH = input(title="/", type=input.integer, defval=5, minval=1, inline="Pivot High",group=gr1)
colorH = input(title="", defval=color.new(color.green,50), inline="Pivot High",group=gr1)

srcL = input(low, title="Pivot Low ", inline="Pivot Low", group=gr1)
leftLenL = input(title="", type=input.integer, defval=5, minval=1, inline="Pivot Low", group=gr1)
rightLenL = input(title="/", type=input.integer, defval=5, minval=1, inline="Pivot Low",group=gr1)
colorL = input(title="", defval=color.new(color.red,50), inline="Pivot Low",group=gr1)


gr2="Options"
ShowHHLL = input(true, title="Show HH, LL, LH, HL markers on candles",group=gr2)
ShowPrice = input(true, title="Show HH, LL, LH, HL  price on candles",group=gr2)
ShowSRLevels = input(true, title="Show S/R Level Extensions",group=gr2)
maxLvlLen = input(0, minval=0, title="Maximum S/R Level Extension Length (0 = Max)",group=gr2)
ShowChannel = input(false, title="Show Levels as a Fractal Chaos Channel",group=gr2)
ShowFB = input(true, title="Show fractal Break out/down symbols",group=gr2)

// Get High and Low Pivot Points
ph = pivothigh(srcH, leftLenH, rightLenH)
pl = pivotlow(srcL, leftLenL, rightLenL)

// Higher Highs, Lower Highs, Higher Lows, Lower Lows 
valuewhen_1 = valuewhen(ph, srcH[rightLenH], 1)
valuewhen_2 = valuewhen(ph, srcH[rightLenH], 0)
higherhigh = na(ph) ? na : valuewhen_1 < valuewhen_2 ? ph : na
valuewhen_3 = valuewhen(ph, srcH[rightLenH], 1)
valuewhen_4 = valuewhen(ph, srcH[rightLenH], 0)
lowerhigh = na(ph) ? na : valuewhen_3 > valuewhen_4 ? ph : na
valuewhen_5 = valuewhen(pl, srcL[rightLenL], 1)
valuewhen_6 = valuewhen(pl, srcL[rightLenL ], 0)
higherlow = na(pl) ? na : valuewhen_5 < valuewhen_6 ? pl : na
valuewhen_7 = valuewhen(pl, srcL[rightLenL], 1)
valuewhen_8 = valuewhen(pl, srcL[rightLenL ], 0)
lowerlow = na(pl) ? na : valuewhen_7 > valuewhen_8 ? pl : na


drawLabel(_offset, _pivot, _style, _yloc, _color, _text) =>
    if not na(_pivot)
        label.new(bar_index[_offset], _pivot, text = _text+tostring(_pivot, format.mintick)+"]", style=_style, yloc=_yloc, color=_color, textcolor=_color)

drawLabel(rightLenH, ShowPrice ? higherhigh : na, label.style_none, yloc.abovebar, colorH, "[")
drawLabel(rightLenH, ShowPrice ? higherlow : na, label.style_none, yloc.belowbar, colorL, "[")
drawLabel(rightLenH, ShowPrice ? lowerhigh : na, label.style_none, yloc.abovebar, colorH, "[")
drawLabel(rightLenH, ShowPrice ? lowerlow : na, label.style_none, yloc.belowbar, colorL, "[")

plotshape(ShowHHLL ? higherhigh : na, title='HH', style=shape.triangledown, location=location.abovebar, color=colorH, text="HH", textcolor=colorH, offset=-rightLenH)
plotshape(ShowHHLL ? higherlow : na, title='HL', style=shape.triangleup, location=location.belowbar, color=colorL, text="HL", textcolor=colorL, offset=-rightLenH)
plotshape(ShowHHLL ? lowerhigh : na, title='LH', style=shape.triangledown, location=location.abovebar, color=colorH, text="LH", textcolor=colorH, offset=-rightLenL)
plotshape(ShowHHLL ? lowerlow : na, title='LL', style=shape.triangleup, location=location.belowbar, color=colorL, text="LL", textcolor=colorL, offset=-rightLenL)


//Count How many candles for current Pivot Level, If new reset.
countH = 0
countL = 0
countH := na(ph) ? nz(countH[1]) + 1 : 0
countL := na(pl) ? nz(countL[1]) + 1 : 0

pvtH = 0.0
pvtL = 0.0
pvtH := na(ph) ? pvtH[1] : srcH[rightLenH]
pvtL := na(pl) ? pvtL[1] : srcL[rightLenL]

HpC = pvtH != pvtH[1] ? na : colorH
LpC = pvtL != pvtL[1] ? na : colorL

// Show Levels if Selected
plot(ShowSRLevels and not ShowChannel and (maxLvlLen == 0 or countH < maxLvlLen) ? pvtH : na, color=HpC, offset=-rightLenH , title="Top Levels HH,LH",style=plot.style_circles)
plot(ShowSRLevels and not ShowChannel and (maxLvlLen == 0 or countL < maxLvlLen) ? pvtL : na, color=LpC, offset=-rightLenL , title="Bottom Levels LL,HL",style=plot.style_circles)

// Show Levels as a Fractal Chaos Channel
plot(ShowSRLevels and ShowChannel ? pvtH : na, color=colorH, style=plot.style_stepline, title="Top Chaos Channel",offset=-rightLenH)
plot(ShowSRLevels and ShowChannel ? pvtL : na, color=colorL, style=plot.style_stepline, title="Bottom Chaos Channel", offset=-rightLenL)

// // Add Optional Fractal Break Alerts
buy = false
sell = false
buy  := close>pvtH and open<=pvtH 
sell := close<pvtL and open>=pvtL 

plotshape(ShowFB and buy?1:na, title="Breakout Bar", text="↑", style=shape.triangleup, location =location.belowbar, color=colorH, textcolor=colorH, size=size.auto, editable=true)
plotshape(ShowFB and sell?-1:na, title="Breakdown Bar",text="↓", style=shape.triangledown,location=location.abovebar, color=colorL, textcolor=colorL, size=size.auto, editable=true)

// Alerts
alertcondition(buy or sell,title="Fractal Break Arrow",message="Alert")
alertcondition(buy,title="Fractal Break Long",message="Long")
alertcondition(sell,title="Fractal Break Short",message="Short")








#################################################################################################################


indicator(title="Moving Average Weighted", shorttitle="WMA", overlay=true, timeframe="", timeframe_gaps=true)
len = input.int(9, minval=1, title="Length")
src = input(close, title="Source")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500)
out = ta.wma(src, len)
plot(out, title="WMA", color=color.blue, offset=offset)


###################################################################################################################



//@version=5
indicator(title="Moving Average Convergence Divergence", shorttitle="MACD", timeframe="", timeframe_gaps=true)
// Getting inputs
fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
plot(macd, title="MACD", color=col_macd)
plot(signal, title="Signal", color=col_signal)

// Calculate RSI
rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ta.highest(rsi, maLengthInput) // Max RSI
rsiMin = ta.lowest(rsi, maLengthInput) // Min RSI

isBB = maTypeInput == "Bollinger Bands"

plot(rsi, "RSI", color=#7E57C2)
plot(rsiMA, "Max RSI", color=color.green)
plot(rsiMin, "Min RSI", color=color.red)
rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")


########################################################################################################



// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © francrypto_ / francrypto® (Volume Profile has been developed by kv4coins. He has already authorized me to use it under the same OSS Licence Terms: MPL 2.0)

//@version=5
// INDICATOR
//----------//
indicator(title      = "[francrypto®] 4 EMAs, PSAR, VP, BB, RSI, MACD & INFO BOX", 
     shorttitle      = "[francrypto® strategy+] 9 indicators in 1 and more", 
     overlay         = true, 
     precision       = 4, 
     linktoseries    = true, 
     max_bars_back   = 750, 
     max_lines_count = 500)
//----------//

//----------//
// BB (public domain)
// 1) added Bollinger Bands for those who asked for it
// 2) added i_showBB option
// 3) bilingual titles: added spanish (SPA) ones
//
i_showBB = input(true, 'Show BB // Mostrar Bandas de Bollinger')
length = input.int(20, minval=1, title="BB Length // Bandas Bollinger Longitud")
src = input(close, title="BB Source // Bandas Bollinger Fuente")
mult = input.float(2.0, minval=0.001, maxval=50, title="BB Standard Deviation // Bandas Bollinger Desviación Típica")
basis = i_showBB ? ta.sma(src, length) : na
dev = mult * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev
BBoffset = input.int(0, "BB Offset // Bandas Bollinger Compensar", minval = -500, maxval = 500)
plot(basis, "BB Basis // Bandas Bollinger Base", color=color.rgb(33, 150, 243, 75), linewidth=1, style=plot.style_cross, offset = BBoffset)
p1 = plot(upper, "BB Upper // Bandas Bollinger Superior", color=color.rgb(33, 150, 243, 75), offset = BBoffset)
p2 = plot(lower, "BB Lower // Bandas Bollinger Inferior", color=color.rgb(33, 150, 243, 75), offset = BBoffset)
fill(p1, p2, title = "Background", color=color.rgb(33, 150, 243, 95))

//----------//
// PSAR (public domain)
// 1) change PSAR circles into teal (bullish) or maroon color (bearish)
// 2) bilingual titles: added spanish (SPA) ones
// 3) added i_showPSAR option
// 
i_showPSAR = input(true, 'Show PSAR // Mostrar Parabólica de SAR')
start = input(0.02, 'PSAR Start // Parabólica de SAR Comienzo')
increment = input(0.02, 'PSAR Increment // Parabólica de SAR Incremento')
maximum = input(0.2, 'PSAR Max Value // Parabólica de SAR Valor Máximo')
out = i_showPSAR ? ta.sar(start, increment, maximum) : na
PSARClose = out < close ? 1 : -1
PSARColor = PSARClose == 1 ? color.teal : color.maroon
plot(out, 'PSAR // Parabólica de SAR', style=plot.style_circles, color=PSARColor)
//----------//

//----------//
// EMA's (public domain)
// 1) bilingual titles: added spanish (SPA) ones
// 2) max value of EMA 1, 2, 3 & 4: 250 to avoid 'loop takes too long to execute' issue
// 3) default value of EMA 1 (10 periods), EMA 2 (21 periods), EMA 3 (55 periods) & EMA 4 (200 periods)
// 4) added bullish or bearish small crosses
// 5) added bullish or bearish big crosses 
// 6) added i_showEMAS option
//
// VARIABLES
i_showEMAS = input(true, 'Show 4 EMAs // Mostrar 4 EMAs')
Length_Longitud_EMA_1 = input.int(10, '1° EMA length // 1° EMA longitud [1-250]', minval=1, maxval=250)
Length_Longitud_EMA_2 = input.int(21, '2° EMA length // 2° EMA longitud [1-250]', minval=1, maxval=250)
Length_Longitud_EMA_3 = input.int(55, '3° EMA length // 3° EMA longitud [1-250]', minval=1, maxval=250)
Length_Longitud_EMA_4 = input.int(200, '4° EMA length // 4° EMA longitud [1-250]', minval=1, maxval=250)
ShowCross_EMA_1_EMA2 = input(defval=true, title="1 & 2 EMAs Small crosses // Cruces pequeños de EMAs 1 y 2")
ShowCross_EMA_3_EMA4 = input(defval=true, title="3 & 4 EMAs Big Crosses // Cruces grandes de EMAs 3 y 4")

EMA1 = i_showEMAS ? ta.ema(close, Length_Longitud_EMA_1) : na
EMA2 = i_showEMAS ? ta.ema(close, Length_Longitud_EMA_2) : na
EMA3 = i_showEMAS ? ta.ema(close, Length_Longitud_EMA_3) : na
EMA4 = i_showEMAS ? ta.ema(close, Length_Longitud_EMA_4) : na

golden_cross_small = ta.cross(EMA2, EMA1) and EMA1[1] <= EMA2[1] and ShowCross_EMA_1_EMA2
death_cross_small = ta.cross(EMA2, EMA1) and EMA2[1] <= EMA1[1] and ShowCross_EMA_1_EMA2
golden_cross = ta.cross(EMA4, EMA3) and EMA3[1] <= EMA4[1] and ShowCross_EMA_3_EMA4
death_cross = ta.cross(EMA4, EMA3) and EMA4[1] <= EMA3[1] and ShowCross_EMA_3_EMA4

// PLOTING
plot(EMA1, color=color.new(#ffff00, 25), linewidth=1, title='1° Exponential Moving Average // 1° Media Móvil Exponencial')
plot(EMA2, color=color.new(#00e6ff, 25), linewidth=1, title='2° Exponential Moving Average // 2° Media Móvil Exponencial')
plot(EMA3, color=color.new(#ffa600, 0), linewidth=1, title='3° Exponential Moving Average // 3° Media Móvil Exponencial')
plot(EMA4, color=color.new(#001eff, 0), linewidth=1, title='4° Exponential Moving Average // 4° Media Móvil Exponencial')

plot(ShowCross_EMA_1_EMA2 ? (ta.cross(EMA1, EMA2) ? EMA1 : na) : na, color=EMA2 - EMA1 > 0 ? color.red : color.lime, style=plot.style_circles, linewidth=4)
plot(ShowCross_EMA_3_EMA4 ? (ta.cross(EMA3, EMA4) ? EMA3 : na) : na, color=EMA4 - EMA3 > 0 ? color.red : color.lime, style=plot.style_cross, linewidth=4)
//----------//

//----------//
// VOLUME PROFILE (VP developed by @kv4coins)
//
// my changes to his code
// 1) bilingual titles: added spanish (SPA) ones
// 2) default value of 'vp_lookback': back 200 to avoid 'loop takes too long to execute' issue
// 3) default value of 'vp_bar_width': 2 so that it looks better
// 4) default value of 'vp_bar_mult': 60 so that it looks better
// 5) default value of 'vp_bar_offset': 62 for a simplified screen
// 6) default value of 'vp_poc_show': false for a simplified screen
// 7) max value of 'vp_lookback': 750 to avoid 'loop takes too long to execute' issue
// 8) max value of 'vp_bar_mult': 200 for a simplified screen
// 9) max value of 'vp_bar_offset': 200 for a simplified screen
// 10) placed 'vp_bar_color' in 75% transparent aqua and 'vp_poc_color' in a solid aqua
// 11) codded bullish and bearish 'bools' to avoid 'loop takes too long to execute' issue
// 12) added i_showVP option
//
// INPUTS
i_showVP = input(true, 'Show VP // Mostrar Perfil de Volumen')

vp_lookback = input.int(defval=200, title='VP Lookback Depth // Retrospectiva Profundidad del Perfil de Volumen [10-750]', minval=10, maxval=750)

vp_max_bars = input.int(defval=250, title='VP Number of Bars // Cantidad de Barras del Perfil de Volumen [10-500]', minval=10, maxval=500)

vp_bar_mult = input.int(defval=60, title='VP Bar Length Multiplier // Longitud de las Barras del Perfil de Volumen [10-200]', minval=10, maxval=200)

vp_bar_offset = input.int(defval=62, title='VP Bar Horizontal Offset // Distancia en Eje Horizontal de las Barras del Perfil de Volumen [0-200]', minval=0, maxval=200)

vp_bar_width = input.int(defval=2, title='VP Bar Width // Ancho de las Barras del Perfil de Volumen [1-20]', minval=1, maxval=20)

// As suggested by @NXT2017 to @kv4coins
vp_delta_type = input.string(defval='Both // Ambos', title='VP Delta Type // Variable Delta del Perfil de Volumen', options=['Both // Ambos', 'Bullish // Toros', 'Bearish // Osos'])

vp_poc_show = input(defval=false, title='VP Extend POC Line // Extender Línea del Punto de Control del Perfil de Volumen')

vp_bar_color = input(defval=color.new(color.aqua, 75), title='VP Bar Color // Color de la Barra del Perfil de Volumen')

vp_poc_color = input(defval=color.new(color.aqua, 0), title='VP POC Color // Color del Punto de control del Perfil de Volumen')

// VARIABLES
float vp_Vmax = 0.0
int vp_VmaxId = 0
int vp_N_BARS = vp_max_bars

var int vp_first = time

vp_a_P = array.new_float(vp_N_BARS + 1, 0.0)
vp_a_V = array.new_float(vp_N_BARS, 0.0)
vp_a_D = array.new_float(vp_N_BARS, 0.0)
vp_a_W = array.new_int(vp_N_BARS, 0)

// CALCULATIONS
float vp_HH = i_showVP ? ta.highest(high, vp_lookback) : na
float vp_LL = i_showVP ? ta.lowest(low, vp_lookback) : na

bool Bullish = vp_delta_type == 'Bullish // Toros'
bool Bearish = vp_delta_type == 'Bearish // Osos'

if barstate.islast
    float vp_HL = (vp_HH - vp_LL) / vp_N_BARS
    for j = 1 to vp_N_BARS + 1 by 1
        array.set(vp_a_P, j - 1, vp_LL + vp_HL * j)
    for i = 0 to vp_lookback - 1 by 1
        int Dc = 0
        array.fill(vp_a_D, 0.0)
        for j = 0 to vp_N_BARS - 1 by 1
            float Pj = array.get(vp_a_P, j)
            if low[i] < Pj and high[i] > Pj and (Bullish ? close[i] >= open[i] : Bearish ? close[i] <= open[i] : true)
                float Dj = array.get(vp_a_D, j)
                float dDj = Dj + nz(volume[i])
                array.set(vp_a_D, j, dDj)
                Dc := Dc + 1
                Dc
        for j = 0 to vp_N_BARS - 1 by 1
            float Vj = array.get(vp_a_V, j)
            float Dj = array.get(vp_a_D, j)
            float dVj = Vj + (Dc > 0 ? Dj / Dc : 0.0)
            array.set(vp_a_V, j, dVj)
    vp_Vmax := array.max(vp_a_V)
    vp_VmaxId := array.indexof(vp_a_V, vp_Vmax)
    for j = 0 to vp_N_BARS - 1 by 1
        float Vj = array.get(vp_a_V, j)
        int Aj = math.round(vp_bar_mult * Vj / vp_Vmax)
        array.set(vp_a_W, j, Aj)

// PLOTING
if barstate.isfirst
    vp_first := time
    vp_first
vp_change = ta.change(time)
vp_x_loc = timenow + math.round(vp_change * vp_bar_offset)

f_setup_bar(n) =>
    x1 = vp_VmaxId == n and vp_poc_show ? math.max(time[vp_lookback], vp_first) : timenow + math.round(vp_change * (vp_bar_offset - array.get(vp_a_W, n)))
    ys = array.get(vp_a_P, n)
    line.new(x1=x1, y1=ys, x2=vp_x_loc, y2=ys, xloc=xloc.bar_time, extend=extend.none, color=vp_VmaxId == n ? vp_poc_color : vp_bar_color, style=line.style_solid, width=vp_bar_width)

if barstate.islast
    for i = 0 to vp_N_BARS - 1 by 1
        f_setup_bar(i)
//----------//

//----------//
// LABEL
//
// 1) added "FRANCRYPTO® information box" Label
// 2) color NavyBlue for Label with orange text
// 3) added Rounds for all decimals
// 4) value of 'Label Vertical Offset' (or Y) = close price value
// 5) default value of 'Label Horizontal Offset' (or X): 65 (and 'maxval': 205) for a simplified screen
// 6) added U$S CCL (for Argentina)
// 7) added Indices and Commodities Section
// 8) added Crypto Dominance Section
// 9) added MACD Section with current trendline: Bullish or Bearish
// 10) added RSI Section with current value in Label
// 11) RSI Overbuy turns Label into Teal color with White text
// 12) RSI Oversell turns Label into Maroon color with White text
// 13) Changed Gold & Silver tickets to 'GOLD' & 'SILVER' because ticket 'SIL1!' doesn't have data
// 
i_offsetLabel = input.int(defval=65, title='Label Horizontal Offset // Distancia en Eje Horizontal de la Etiqueta [0-205]', minval=0, maxval=205)

offset = i_offsetLabel * (time - time[1])
splitter = '__________________'
nl = '\n'
title = '╔╗ FRANCRYPTO®' + nl + '╠╗    Info. BOX' + nl + '═╝    💡🔗💻'

string dynamicText = title + nl
var label id = na
label.delete(id)
id := label.new(x=time + offset, y=close, xloc=xloc.bar_time, text=dynamicText)

// LABEL VARIABLES
i_showCCL = input(true, 'Show CCL dollar // Mostrar dólar CCL')
i_showINDEX = input(true, 'Show INDICES // Mostrar INDICES')
i_showDOMINANCE = input(true, 'Show DOMINANCE // Mostrar DOMINANCE')
i_showMACD = input(true, 'Show MACD // Mostrar MACD')
i_showRSI = input(true, 'Show RSI // Mostrar RSI')

// ROUNDS
f_round(_val, _decimals) =>
    if _decimals == -1
        _val
    else
        _p = math.pow(10, _decimals)
        math.round(math.abs(_val) * _p) / _p * math.sign(_val)

f_strHelp(_prefix, _var, _round) =>
    _res = str.tostring(f_round(_var, _round))
    _prefix + ' ' + _res + nl

// CCLSection
CCLTitle = splitter + nl
CCLClose = request.security('(BCBA:GGAL/NASDAQ:GGAL*10+BCBA:BMA/NYSE:BMA*10+BCBA:YPFD/NYSE:YPF+BCBA:PAMP/NYSE:PAM*25+BCBA:BBAR/NYSE:BBAR*3)/5', 'M', close)
CCL = f_strHelp('🇦🇷$ CCL💸 💲', CCLClose, 1)
CCLSection = i_showCCL ? CCLTitle + nl + CCL : na

// INDEXSection
INDEXTitle = splitter + nl + nl + 'Forex💰 & Metals🔒️' + nl
DOLLARClose = request.security('DXY', 'M', close)
DOLLAR = f_strHelp('US$ Index 💵 Val:', DOLLARClose, 1)
EUROClose = request.security('EXY', 'M', close)
EURO = f_strHelp('€ Index 💶 Val:', EUROClose, 1)
GOLDClose = request.security('GOLD', 'M', close)
GOLD = f_strHelp('Gold 🟡 💲', GOLDClose, 1)
SILVERClose = request.security('SILVER', 'M', close)
SILVER = f_strHelp('Silver ⚪ 💲', SILVERClose, 1)
INDEXSection = i_showINDEX ? INDEXTitle + nl + DOLLAR + EURO + nl + GOLD + SILVER : na

// DOMINANCESection
DOMINANCETitle = splitter + nl + nl + 'Crypto Dominance🌐' + nl
BTCDClose = request.security('BTC.D', 'M', close)
BTCD = f_strHelp('BTC ₿ % →', BTCDClose, 1)
ETHDClose = request.security('ETH.D', 'M', close)
ETHD = f_strHelp('ETH ⬨ % →', ETHDClose, 1)
DOMINANCESection = i_showDOMINANCE ? DOMINANCETitle + nl + BTCD + ETHD : na

// MACDSection
MACDTitle = splitter + nl
[macd, macdsignal, macdhist] = ta.macd(close, fastlen=12, slowlen=26, siglen=9)
trend3 = macdhist > 0 ? '[ Bullish 📈 Alcista ]' : '[ Bearish 📉 Bajista ]'
MACDSection = i_showMACD ? MACDTitle + nl + 'MACD Trend 📊 Tend:' + nl + trend3 + nl : na

// RSISection
RSITitle = splitter + nl
rsi = ta.rsi(close, 14)
Trend1 = rsi > 70 ? nl + '🚨⚠️ 🚨⚠️ 🚨' + nl + nl + '[ OVERBUY!!!! 📈' + nl + '¡¡SOBRECOMPRA!! ]' : na
Trend2 = rsi < 30 ? nl + '🚨⚠️ 🚨⚠️ 🚨' + nl + nl + '[ OVERSELL!!!! 📉' + nl + '¡¡SOBREVENTA!! ]' : na
RSISection = i_showRSI ? RSITitle + nl + f_strHelp('RSI 🧮 〽️ Val:', rsi, 1) + Trend1 + Trend2 : na

// STYLE
label.set_textalign(id, text.align_left)
label.set_color(id, color=color.rgb(0, 0, 50, 0))
label.set_textcolor(id, textcolor=color.new(color.orange, 0))
label.set_style(id, label.style_label_left)

// DynamicText
dynamicText := dynamicText + CCLSection + INDEXSection + DOMINANCESection + MACDSection + RSISection
label.set_text(id, text=dynamicText)

if Trend1 == nl + '🚨⚠️ 🚨⚠️ 🚨' + nl + nl + '[ OVERBUY!!!! 📈' + nl + '¡¡SOBRECOMPRA!! ]'
    label.set_textcolor(id, textcolor=color.white)
    label.set_color(id, color.teal)

if Trend2 == nl + '🚨⚠️ 🚨⚠️ 🚨' + nl + nl + '[ OVERSELL!!!! 📉' + nl + '¡¡SOBREVENTA!! ]'
    label.set_textcolor(id, textcolor=color.white)
    label.set_color(id, color.maroon)
//----------//
// END


###############################################################################################################


// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator("Machine Learning: Gaussian Process Regression [LuxAlgo]", "LuxAlgo - Machine Learning: Gaussian Process Regression", overlay = true, max_lines_count = 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
window = input.int(100, 'Training Window    ', minval = 0, inline = 'window')
fitCss = input(#2962ff, '', inline = 'window')

forecast = input.int(20, 'Forecasting Length', minval = 0, maxval = 500, inline = 'forecast')
fcastCss = input(#f23645, '', inline = 'forecast')

length = input.float(20., 'Smooth', minval = 1)
sigma = input.float(0.01, step = 0.1, minval = 0)

update = input.string('Lock Forecast', 'Update Mechanism'
  , options = ['Lock Forecast', 'Update Once Reached', 'Continuously Update'])

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
rbf(x1, x2, l)=> math.exp(-math.pow(x1 - x2, 2) / (2.0 * math.pow(l, 2)))

kernel_matrix(X1, X2, l)=>
    km = matrix.new<float>(X1.size(), X2.size())

    i = 0
    for x1 in X1
        j = 0
        for x2 in X2
            rbf = rbf(x1, x2, l)
            km.set(i, j, rbf)
            j += 1
        i += 1
    
    km

//-----------------------------------------------------------------------------}
//Kernel matrix
//-----------------------------------------------------------------------------{
var identity = matrix.new<int>(window, window, 0)
var matrix<float> K_source = na

if barstate.isfirst
    xtrain = array.new<int>(0)
    xtest = array.new<int>(0)

    //Build identity matrix
    for i = 0 to window-1
        for j = 0 to window-1
            identity.set(i, j, i == j ? 1 : 0)
    
        xtrain.push(i)
    
    for i = 0 to window+forecast-1
        xtest.push(i)
    
    //Compute kernel matrices
    s = identity.mult(sigma * sigma)
    Ktrain = kernel_matrix(xtrain, xtrain, length).sum(s)
    K_inv = Ktrain.pinv()
    K_star = kernel_matrix(xtrain, xtest, length)
    K_source := K_star.transpose().mult(K_inv)

//-----------------------------------------------------------------------------}
//Set forecast
//-----------------------------------------------------------------------------{
n = bar_index
mean = ta.sma(close, window)

//Model set condition
var step = 0
set_model = switch update
    'Lock Forecast' => barstate.islastconfirmedhistory
    'Update Once Reached' => barstate.islast and step == 0
    'Continuously Update' => barstate.islast

if set_model
    //Remove previous lines
    if update != 'Lock'
        for l in line.all
            l.delete()

    //Dataset
    ytrain = array.new<float>(0)
    
    for i = 0 to window-1
        ytrain.unshift(close[i] - mean)

    //Estimate
    mu = K_source.mult(ytrain)

    //Set forecast
    float y1 = na
    k = -window+2

    points = array.new<chart.point>(0)
    fcast = array.new<chart.point>(0)

    for element in mu
        if k == 1
            fcast.push(chart.point.from_index(n+k, element + mean))
            points.push(chart.point.from_index(n+k, element + mean))
        else if k > 1
            fcast.push(chart.point.from_index(n+k, element + mean))
        else
            points.push(chart.point.from_index(n+k, element + mean))
        
        k += 1

    polyline.delete(polyline.new(points, line_color = fitCss, line_width = 2)[1])
    polyline.delete(polyline.new(fcast, line_color = fcastCss, line_width = 2)[1])

//Update forecast
if update == 'Update Once Reached'
    if barstate.islast
        step += 1
        step := step == forecast ? 0 : step

//-----------------------------------------------------------------------------}





// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © DeltaAlgo

//@version=5
indicator("Trend Gaussian Channels [DeltaAlgo]", "Trend Gaussian Channels [DeltaAlgo]", true)

// user inputs
length = input.int(25, "Length", 2, 999, 1, inline = "tgc", group = "trend gaussian channel settings")
mult   = input.float(1, "", 1, 5, 0.01, "Top & Bottom Band Multiplier", "tgc", "trend gaussian channel settings")

barcol = input.bool(true, "Bar Colors", "Toggle On/Off Candle Colors", group = "candle color settings")
signal = input.bool(true, "Trend Shift Signals", "Toggle On/Off Trend Signals When Trend Shifts", group = "candle color settings")

// gaussian channel

guassianBasis(float source, int length, float mult) =>
    basis = ta.ema(ta.hma(ta.sma(source, length), length * 2), length /2)
    topBand = basis + (ta.atr(105) * (mult * 1.005))
    lowBand = basis - (ta.atr(105) / (mult / 1.005))
    [basis, topBand, lowBand]

[base, upper, lower] = guassianBasis(close, length, mult)

upward = base < high
dnward = base > low

basePlot  = plot(base, "Base", upward ? color.new(#00cf4b, 15) : color.new(#ff5252, 15), 2)
upperPlot = plot(upper, "Upper", upward ? color.new(#00cf4b, 20) : color.new(#ff5252, 20), 2)
lowerPlot = plot(lower, "Lower", upward ? color.new(#00cf4b, 20) : color.new(#ff5252, 20), 2)

fill(upperPlot, lowerPlot, upward ? color.new(#00cf4b, 80) : color.new(#ff0000, 80), "Channel Fill")

// barcolor 

uptrend = color.from_gradient(ta.rsi(close, 15), 25, 76, #67248f, #00cf4b)
ranging = color.from_gradient(ta.rsi(close, 15), 30, 75, #63726f, #67248f)
dntrend = color.from_gradient(ta.rsi(close, 15), 8, 82, #ff0000, #67248f)

barcolor(barcol ? high > upper ? uptrend : high < upper and high > lower ? ranging : dntrend : na)

// signals

upSignalCondition = high > upper and ta.crossover(low, upper)
dnSignalCondition = low < lower and ta.crossunder(high, lower)

plotshape(signal and upSignalCondition, "Bullish Signal", shape.labelup, location.belowbar, color.new(#00cf4b, 35), size = size.small)
plotshape(signal and dnSignalCondition, "Bearish Signal", shape.labeldown, location.abovebar, color.new(#ff0000, 35), size = size.small)



// user inputs trend gaussian channel settings
length_gaussian = input(25, "Length", 2, 999, 1, inline = "tgc", group = "trend gaussian channel settings")
mult   = input(1, "", 1, 5, 0.01, "Top & Bottom Band Multiplier", "tgc", "trend gaussian channel settings")
barcol = input(true, "Bar Colors", "Toggle On/Off Candle Colors", group = "candle color settings")
signal = input(true, "Trend Shift Signals", "Toggle On/Off Trend Signals When Trend Shifts", group = "candle color settings")
// gaussian channel
guassianBasis(source, length_gaussian, mult) =>
    basis = ema(hma(sma(source, length_gaussian), length_gaussian * 2), length_gaussian /2)
    topBand = basis + (atr(105) * (mult * 1.005))
    lowBand = basis - (atr(105) / (mult / 1.005))
    [basis, topBand, lowBand]
[base, upper, lower] = guassianBasis(close, length_gaussian, mult)
upward = base < high
dnward = base > low
basePlot  = plot(base, "Base", colorup = upward ? color.new(#00cf4b, 15) : color.new(#ff5252, 15), linewidth = 2)
upperPlot = plot(upper, "Upper", colorup = upward ? color.new(#00cf4b, 20) : color.new(#ff5252, 20), linewidth = 2)
lowerPlot = plot(lower, "Lower", colorup = upward ? color.new(#00cf4b, 20) : color.new(#ff5252, 20), linewidth = 2)
fill(upperPlot, lowerPlot, colorup = upward ? color.new(#00cf4b, 80) : color.new(#ff0000, 80), transp = 80, title = "Channel Fill")
// barcolor 
uptrend = color.new(color.from_gradient(rsi(close, 15), 25, 76, #67248f, #00cf4b))
ranging = color.new(color.from_gradient(rsi(close, 15), 30, 75, #63726f, #67248f))
dntrend = color.new(color.from_gradient(rsi(close, 15), 8, 82, #ff0000, #67248f))
barcolor(barcol ? high > upper ? uptrend : high < upper and high > lower ? ranging : dntrend : na)
// signals
upSignalCondition = high > upper and crossover(low, upper)
dnSignalCondition = low < lower and crossunder(high, lower)
plotshape(signal and upSignalCondition, "Bullish Signal", shape.labelup, location.belowbar, color.new(#00cf4b, 35), size = size.small)
plotshape(signal and dnSignalCondition, "Bearish Signal", shape.labeldown, location.abovebar, color.new(#ff0000, 35), size = size.small)